name: Production Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Set build to PROD
        run: |
          sed -i "s/'build': '[^']*'/'build': 'PROD'/" lib/env.dart
          sed -i "s|'apiUrl': '[^']*'|'apiUrl': '${{ secrets.THEMARQUIS_PRODUCTION_API }}'|" lib/env.dart
          sed -i "s|'wsUrl': '[^']*'|'wsUrl': '${{ secrets.THEMARQUIS_PRODUCTION_WS }}'|" lib/env.dart

      - name: Decode Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties

      - name: Build APK
        id: build
        run: |
          file='VERSION'
          fileData=`cat $file`
          IFS='.'
          read -a versionValue <<< "$fileData"
          buildNumber=$(( ${versionValue[0]} * 1000000 + ${versionValue[1]} * 10000 + ${{ github.run_number }} ))
          IFS=''
          buildName="${versionValue[0]}.${versionValue[1]}.${versionValue[2]}-prod.${{ github.run_number }}"
          echo "buildName=$buildName" >> $GITHUB_OUTPUT
          echo "Building version $buildName ($buildNumber)"
          flutter build apk --release --build-number=$buildNumber --build-name=$buildName

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: prod-${{ github.sha }}
          name: "Production ${{ steps.build.outputs.buildName }}"
          files: build/app/outputs/flutter-apk/app-release.apk
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # build-ios:
  #   runs-on: macos-latest
  #   env:
  #     APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
  #     APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
  #     APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ secrets.APP_STORE_CONNECT_KEY_IDENTIFIER }}
  #     APP_STORE_APP_ID: ${{ secrets.APP_STORE_APP_ID }}
  #     DISTRIBUTION_CERTIFICATE: ${{ secrets.DIS_CERTIFICATE_BASE64 }}
  #     DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.DIST_CERTIFICATE_PASSWORD }}
  #     PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}

  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v4

  #     - name: Set up Flutter SDK
  #       uses: flutter-actions/setup-flutter@v3
  #       with:
  #         channel: stable
  #         version: 3.27.2

  #     - name: Install dependencies
  #       run: |
  #         flutter clean
  #         flutter pub get

  #     - name: Set build to PROD
  #       run: |
  #         sed -i '' "s/'build': '[^']*'/'build': 'PROD'/" lib/env.dart
  #         sed -i "s|'apiUrl': '[^']*'|'apiUrl': '${{ secrets.THEMARQUIS_PRODUCTION_API }}'|" lib/env.dart
  #         sed -i "s|'wsUrl': '[^']*'|'wsUrl': '${{ secrets.THEMARQUIS_PRODUCTION_WS }}'|" lib/env.dart

  #         - name: Set up Provisioning Profile
  #         run: |
  #           PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
  #           mkdir -p "$PROFILES_HOME"
  #           PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
  #           echo ${PROVISIONING_PROFILE} | base64 --decode > "$PROFILE_PATH"
  #           echo "Saved provisioning profile $PROFILE_PATH"   
  
  #           - name: Set up Provisioning Profile
  #           run: |
  #             PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
  #             mkdir -p "$PROFILES_HOME"
  #             PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
  #             echo ${PROVISIONING_PROFILE} | base64 --decode > "$PROFILE_PATH"
  #             echo "Saved provisioning profile $PROFILE_PATH"   
    
  #         - name: Set up Distribution Certificate
  #           run: |
  #             echo $DISTRIBUTION_CERTIFICATE | base64 --decode > /tmp/certificate.p12
  #             keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $DISTRIBUTION_CERTIFICATE_PASSWORD
    
  #         - name: Set up Code signing settings on Xcode project
  #           run: xcode-project use-profiles
    
  #         - name: Build IPA for Distribution
  #           run: |
  #             file='VERSION'
  #             fileData=`cat $file`
  #             IFS='.'
  #             read -a versionValue <<< "$fileData"
  #             buildNumber=$(( ${versionValue[0]} * 1000000 + ${versionValue[1]} * 10000 + ${{ github.run_number }} ))
  #             IFS=''
  #             buildName="${versionValue[0]}.${versionValue[1]}.${versionValue[2]}"
  #             echo "Uploading build $buildName"
  #             flutter build ipa --release --build-number=$buildNumber --build-name=$buildName --export-options-plist=$HOME/export_options.plist
    
  #         - name: Upload IPA to App Store Connect
  #           run: |
  #             APP_FILE=$(find $(pwd) -name "*.ipa")
  #             app-store-connect publish \
  #               --path "$APP_FILE" \
  #               --testflight \
  #               --beta-group "TheMarquis Private Test"
    